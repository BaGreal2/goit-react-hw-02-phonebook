{"version":3,"sources":["App.module.css","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","state","contacts","id","uuidv4","name","number","filter","test","prevProps","prevState","this","console","log","setState","document","getElementById","children","value","push","evt","i","length","target","className","styles","title","phonebook","form","onSubmit","preventDefault","checking","alert","text","type","required","button","onChange","toLowerCase","contact","includes","map","element","key","keyid","onClick","splice","indexOf","find","closest","getAttribute","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.73b20d2c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"phonebook\":\"App_phonebook__3Ccbk\",\"form\":\"App_form__3SsOj\",\"text\":\"App_text__3mxwj\",\"title\":\"App_title__6eRQA\",\"button\":\"App_button__1fF1x\",\"contacts\":\"App_contacts__1P26p\",\"element\":\"App_element__1ZGUI\"};","import React, {Component} from 'react';\nimport styles from './App.module.css';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport default class App extends Component {\n  constructor(){\n    super()\n    this.state = {\n      contacts: [\n        {id: uuidv4(), name: 'Rosie Simpson', number: '459-12-56'},\n        {id: uuidv4(), name: 'Hermione Kline', number: '443-89-12'},\n        {id: uuidv4(), name: 'Eden Clements', number: '645-17-79'},\n        {id: uuidv4(), name: 'Annie Copeland', number: '227-91-26'},\n      ],\n      name: \"\",\n      number: \"\",\n      filter: [\n        {id: uuidv4(), name: 'Rosie Simpson', number: '459-12-56'},\n        {id: uuidv4(), name: 'Hermione Kline', number: '443-89-12'},\n        {id: uuidv4(), name: 'Eden Clements', number: '645-17-79'},\n        {id: uuidv4(), name: 'Annie Copeland', number: '227-91-26'},\n      ],\n      test: true,\n    };\n  }\n      componentDidUpdate(prevProps, prevState){\n        if(this.state.name !== prevState.name){\n          console.log(this.state)\n          this.setState({\n            name: document.getElementById('#form').children[1].value,\n            number: document.getElementById('#form').children[3].value,\n          })\n          this.state.contacts.push({\n            id: uuidv4(),\n            name: this.state.name,\n            number: this.state.number,\n          })\n          this.state.filter.push({\n            id: uuidv4(),\n            name: this.state.name,\n            number: this.state.number,\n          })\n        }\n      }\n      checking(contacts, evt){for(let i = 0; i<contacts.length; i++){\n        console.log(contacts[i])\n        if(contacts[i].name === evt.target.children[1].value){\n          return true;\n        }\n       }}\n  render() {\n    const { contacts } = this.state;\n    return(\n    <>\n        <h1 className={styles.title}>Phonebook</h1>\n      <div className={styles.phonebook}>\n        <form className={styles.form} id=\"#form\" onSubmit={evt=>{\n          evt.preventDefault()\n         if(!(this.checking(contacts, evt))){\n          this.setState({\n            name: evt.target.children[1].value,\n            number: evt.target.children[3].value,\n          })\n        } else{\n          alert(`${evt.target.children[1].value} is already in list`)\n        }\n        }}>\n          <h3 className={styles.text}>Name</h3>\n          <input type=\"text\" required></input>\n          <h3>Number</h3>\n          <input type=\"text\" required></input>\n          <button className={styles.button} type=\"submit\">Add Contact</button>\n        </form>\n      </div>\n\n      <div className={styles.contacts}>\n        <h1>Contacts</h1>\n          <input type=\"text\" onChange={evt=>{\n            console.log(evt.target.value.toLowerCase())\n            this.setState({\n              contacts: this.state.filter.filter(contact=>contact.name.toLowerCase().includes(evt.target.value.toLowerCase()))\n            })\n          }}></input>\n          <ul>\n          {contacts.map(contact =>(\n            <li className={styles.element} key={ contact.id } keyid={contact.id}>\n              {contact.name}: {contact.number} <button className={styles.button} onClick={evt=>{\n                contacts.splice(contacts.indexOf(contacts.find(contact=>contact.id===evt.target.closest('LI').getAttribute(\"keyid\"))), 1)\n                this.state.filter.splice(contacts.indexOf(contacts.find(contact=>contact.id===evt.target.closest('LI').getAttribute(\"keyid\"))), 1)\n                this.setState({\n                  test: false,\n                })\n              }}>Delete</button>\n            </li>\n          ))}\n          </ul>\n      </div>\n    </>        \n    )\n  };\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}